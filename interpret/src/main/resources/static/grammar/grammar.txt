<begin> → <Program>
<Program> → <Bases>
<Bases> → <Base> <Bases>
<Bases> → <Base>
<Base> → <Decl>
<Base> → <StructDef>
<Base> → <Function>
<Decl> → <Type> id ;
<Decl> → <Type> <Array> ;
<Array> → <Array> [ num ]
<Array> → id [ num ]
<Decl> → <Type> id = <Bool> ;
<Decl> → struct id id ;
<StructDef> → struct id { <Decls> } ;
<Decls> → <Decl> <Decls>
<Decls> → <Decl>
<Function> → <Type> <FuncDecl> <Block>
<FuncDecl> → id ( <ParamDecls> )
<FuncDecl> → id ( )
<ParamDecls> → <ParamDecl> , <ParamDecls>
<ParamDecls> → <ParamDecl>
<ParamDecl> → <Type> id
<FuncUse> → id ( <Bools> )
<FuncUse> → id ( )
<Bools> → <Bool> , <Bools>
<Bools> → <Bool>
<Block> → { <Stmts> }
<Type> → int
<Type> → float
<Type> → char
<Type> → void
<Stmts> → <Stmt> <Stmts>
<Stmts> → <Stmt>
<Stmt> → <Decl>
<Stmt> → <Asgn>
<Stmt> → if ( <Bool> ) <Stmt>
<Stmt> → if ( <Bool> ) <Stmt> else <Stmt>
<Stmt> → while ( <Bool> ) <Stmt>
<Stmt> → do <Stmt> while ( <Bool> ) ;
<Stmt> → return ;
<Stmt> → return <Bool> ;
<Stmt> → <Block>
<Stmt> → <Bool> ;
<Stmt> → break ;
<Asgn> → <Loc> = <Bool> ;
<Loc> → <Loc> [ <Bool> ]
<Loc> → id
<Loc> → id . id
<Bool> → <Join> || <Bool>
<Bool> → <Join>
<Join> → <Equality> && <Join>
<Join> → <Equality>
<Equality> → <Rel> == <Equality>
<Equality> → <Rel> != <Equality>
<Equality> → <Rel>
<Rel> → <Expr> < <Expr>
<Rel> → <Expr> <= <Expr>
<Rel> → <Expr> >= <Expr>
<Rel> → <Expr> > <Expr>
<Rel> → <Expr>
<Expr> → <Expr> + <Term>
<Expr> → <Expr> - <Term>
<Expr> → <Term>
<Term> → <Term> * <Unary>
<Term> → <Term> / <Unary>
<Term> → <Unary>
<Unary> → ! <Unary>
<Unary> → - <Unary>
<Unary> → <Factor>
<Factor> → ( <Bool> )
<Factor> → <Loc>
<Factor> → num
<Factor> → real
<Factor> → <FuncUse>
<Factor> → str
<Factor> → cha